library(devtools)
# Combine and partition test data to be put in a light DS server
# Here I combine the CNSIM 1,2 & 3 datasets by rows and then partition by columns
# The idea is to try and have different types of variables mixed up on the two servers
data("CNSIM1")
data("CNSIM2")
data("CNSIM3")
AllCNSIM <- rbind(CNSIM1,CNSIM2,CNSIM3)
Partition1 <- AllCNSIM[,c("LAB_TSC","LAB_TRIG","PM_BMI_CONTINUOUS","DIS_CVA")]
Partition2 <- AllCNSIM[,c("LAB_HDL","LAB_GLUC_ADJUSTED","MEDI_LPD","DIS_DIAB")]
Partition3 <- AllCNSIM[,c("DIS_AMI","GENDER","PM_BMI_CATEGORICAL")]
dslite.server <- newDSLiteServer(tables=list(CNSIM1=Partition1, CNSIM2=Partition2, CNSIM3=Partition3))
# load corresponding DataSHIELD login data
data("logindata.dslite.cnsim")
DSLite::defaultDSConfiguration()
dslite.server$config()
dslite.server$profile()
# datashield logins and assignments
conns <- datashield.login(logindata.dslite.cnsim, assign=TRUE)
# get the session ID of "sim1" node connection object
conns$sim1@sid
# the same ID is in the DSLiteServer
dslite.server$hasSession(conns$sim1@sid)
# get data represented by symbol D for each DataSHIELD connection
data <- getDSLiteData(conns, "D")
# get data represented by symbol D from a specific DataSHIELD connection
data1 <- getDSLiteData(conns$sim1, "D")
data2 <- getDSLiteData(conns$sim2, "D")
data3 <- getDSLiteData(conns$sim3, "D")
vertCorDS <- function(variable_names = NULL) {
U_combined <- NULL
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
devtools::load_all(".")
View(data1)
View(data1)
View(data2)
View(data2)
View(data3)
View(data3)
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(x_axis,factor_var) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"))
datashield.errors()
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"))
devtools::load_all(".")
devtools::load_all(".")
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"))
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
devtools::load_all(".")
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
#ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
datashield.aggregate(conns, quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
datashield.errors()
devtools::load_all(".")
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
#ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
datashield.aggregate(conns, quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
vertCorDS <- function(variable_names) {
U_combined <- NULL
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
vertCorDS <- function(variable_names) {
U_combined <- NULL
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
#ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
datashield.aggregate(conns, quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
#ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
datashield.aggregate(conns$sim1, quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names="LAB_TSC",datasources = conns)
devtools::load_all(".")
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
vertCorDS <- function(variable_names) {
U_combined <- NULL
print(parent.frame())
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
vertCorDS <- function(variable_names) {
U_combined <- NULL
print(eval(parse(text="LAB_HDL"), envir = parent.frame())
for (var_name in variable_names) {
vertCorDS <- function(variable_names) {
U_combined <- NULL
print(eval(parse(text="LAB_HDL"), envir = parent.frame())
for (var_name in variable_names) {
vertCorDS <- function(variable_names) {
U_combined <- NULL
print(parent.frame())
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
vertCorDS <- function(variable_names) {
U_combined <- NULL
print(eval(parse(text="LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
datashield.errors()
View(data2)
View(data3)
View(data2)
vertCorDS <- function(variable_names) {
U_combined <- NULL
print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)
vertCorDS <- function(variable_names) {
U_combined <- NULL
#print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
#print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS","data2$LAB_HDL","data3$GENDER"),datasources = conns)
vertCorDS <- function(variable_names) {
U_combined <- NULL
#print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
#var is likely in other server
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS","data2$LAB_HDL","data3$GENDER"),datasources = conns)
vertCorDS <- function(variable_names) {
U_combined <- NULL
#print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
print("didnt work")
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS","data2$LAB_HDL","data3$GENDER"),datasources = conns)
vertCorDS <- function(variable_names) {
U_combined <- NULL
#print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
print("didnt work")
result <- eval(parse(text=var_name), envir = parent.frame())
#print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS","data2$LAB_HDL","data3$GENDER"),datasources = conns)
datashield.errors()
vertCorDS <- function(variable_names) {
U_combined <- NULL
#print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
print("didnt work")
result <- eval(parse(text=var_name), envir = parent.frame())
result[is.na(result)] <- 0
#print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS","data2$LAB_HDL","data3$GENDER"),datasources = conns)
datashield.errors()
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS"),datasources = conns$sim1)
devtools::load_all(".")
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS"),datasources = conns$sim1)
#datashield.aggregate(conns$sim1, #quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
#datashield.aggregate(conns$sim1, quote(ds.vertCor()))
#the drop=FALSE is super important, because it preserves the rownames of our feature
#multihist(data1[,1,drop=FALSE],data1[,2,drop=FALSE])
#anotherhist(as.numeric(unlist(data1[,1,drop=FALSE])),data3[,"PM_BMI_CATEGORICAL",drop=FALSE])
vertCorDS <- function(variable_names) {
U_combined <- NULL
#print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
#print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
print("didnt work")
result <- eval(parse(text=var_name), envir = parent.frame())
result[is.na(result)] <- 0
#print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS"),datasources = conns$sim1)
#datashield.aggregate(conns$sim1, #quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
#datashield.aggregate(conns$sim1, quote(ds.vertCor()))
#the drop=FALSE is super important, because it preserves the rownames of our feature
#multihist(data1[,1,drop=FALSE],data1[,2,drop=FALSE])
#anotherhist(as.numeric(unlist(data1[,1,drop=FALSE])),data3[,"PM_BMI_CATEGORICAL",drop=FALSE])
devtools::load_all(".")
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("data1$LAB_TSC","data1$PM_BMI_CONTINUOUS"),datasources = conns$sim1)
#datashield.aggregate(conns$sim1, #quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
#datashield.aggregate(conns$sim1, quote(ds.vertCor()))
#the drop=FALSE is super important, because it preserves the rownames of our feature
#multihist(data1[,1,drop=FALSE],data1[,2,drop=FALSE])
#anotherhist(as.numeric(unlist(data1[,1,drop=FALSE])),data3[,"PM_BMI_CATEGORICAL",drop=FALSE])
devtools::load_all(".")
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS"),datasources = conns$sim1)
datashield.errors()
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("CNSIM1$LAB_TSC","CNSIM1$PM_BMI_CONTINUOUS"),datasources = conns$sim1)
#datashield.aggregate(conns$sim1, #quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
#datashield.aggregate(conns$sim1, quote(ds.vertCor()))
#the drop=FALSE is super important, because it preserves the rownames of our feature
#multihist(data1[,1,drop=FALSE],data1[,2,drop=FALSE])
#anotherhist(as.numeric(unlist(data1[,1,drop=FALSE])),data3[,"PM_BMI_CATEGORICAL",drop=FALSE])
vertCorDS <- function(variable_names) {
U_combined <- NULL
#print(eval(parse(text="data2$LAB_HDL"), envir = parent.frame()))
for (var_name in variable_names) {
if (exists(var_name, envir = parent.frame())) {
#go ahead with eval
result <- eval(parse(text=var_name), envir = parent.frame())
#print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
} else {
print("didnt work")
result <- eval(parse(text=var_name), envir = parent.frame())
result[is.na(result)] <- 0
result <- scale(result)
#print(result)
svd_result <- svd(result)
U_combined <- cbind(U_combined, svd_result$u %*% svd_result$d)
}
}
return(U_combined)
}
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("CNSIM1$LAB_TSC","CNSIM1$PM_BMI_CONTINUOUS"),datasources = conns$sim1)
#datashield.aggregate(conns$sim1, #quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
#datashield.aggregate(conns$sim1, quote(ds.vertCor()))
#the drop=FALSE is super important, because it preserves the rownames of our feature
#multihist(data1[,1,drop=FALSE],data1[,2,drop=FALSE])
#anotherhist(as.numeric(unlist(data1[,1,drop=FALSE])),data3[,"PM_BMI_CATEGORICAL",drop=FALSE])
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("CNSIM1$LAB_TSC","CNSIM1$PM_BMI_CONTINUOUS"),datasources = conns)
# add my mthods to the configuration
dslite.server$aggregateMethod("ds.vertCor", function(variable_names, datasources){ ds.vertCor(variable_names, datasources) })
dslite.server$aggregateMethod("vertCorDS", function(variable_names){ vertCorDS(variable_names) })
#datashield.assign(conns, "A", "CNSIM1", variables=c("LAB_TSC"))
#datashield.assign(conns, "B", "CNSIM1", variables=c("DIS_CVA"))
ds.vertCor(variable_names=c("CNSIM1$LAB_TSC","CNSIM1$PM_BMI_CONTINUOUS"),datasources = conns$sim1)
#datashield.aggregate(conns$sim1, #quote(ds.vertCor(variable_names=c("LAB_TSC","PM_BMI_CONTINUOUS","LAB_HDL","GENDER"),datasources = conns)))
#datashield.aggregate(conns$sim1, quote(ds.vertCor()))
devtools::load_all(".")
